//
// Generated by JTB 1.3.2
//

package foo.parser.syntaxtree;

import foo.parser.syntaxtree.Node;
import foo.parser.syntaxtree.NodeChoice;

/**
 * Grammar production:
 * f0 -> Ident() ( <LBRACE> ( Ident() ( <COMMA> Ident() )* )? <RBRACE> <ARROW> | <ARROW> | <BINOP> Ident() <ARROW> | <ANYOP> Ident() <ARROW> | <COMMA> Ident() <ARROW> )
 *       | <NUMBER> <ARROW>
 *       | <ANYOP> ( <NUMBER> | Ident() ) <ARROW>
 *       | <LSQBRACE> ( Ident() <VERTBAR> Ident() <RSQBRACE> <ARROW> | <RSQBRACE> <ARROW> )
 *       | <LBRACE> Ident() ( <COMMA> | <BINOP> ) Ident() <RBRACE> <ARROW>
 */
public class LHS implements Node {
   public foo.parser.syntaxtree.NodeChoice f0;

   public LHS(NodeChoice n0) {
      f0 = n0;
   }

   public void accept(foo.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(foo.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(foo.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(foo.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

