//
// Generated by JTB 1.3.2
//

package foo.parser.syntaxtree;

import foo.parser.syntaxtree.Ident;
import foo.parser.syntaxtree.Node;
import foo.parser.syntaxtree.NodeListOptional;
import foo.parser.syntaxtree.NodeToken;

/**
 * Grammar production:
 * f0 -> <FINAL>
 * f1 -> <STATES>
 * f2 -> Ident()
 * f3 -> ( Ident() )*
 * f4 -> <FULLSTOP>
 */
public class PrologFinalStates implements Node {
   public foo.parser.syntaxtree.NodeToken f0;
   public foo.parser.syntaxtree.NodeToken f1;
   public foo.parser.syntaxtree.Ident f2;
   public foo.parser.syntaxtree.NodeListOptional f3;
   public foo.parser.syntaxtree.NodeToken f4;

   public PrologFinalStates(foo.parser.syntaxtree.NodeToken n0, foo.parser.syntaxtree.NodeToken n1, foo.parser.syntaxtree.Ident n2, foo.parser.syntaxtree.NodeListOptional n3, foo.parser.syntaxtree.NodeToken n4) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
   }

   public PrologFinalStates(Ident n0, NodeListOptional n1) {
      f0 = new foo.parser.syntaxtree.NodeToken("Final");
      f1 = new foo.parser.syntaxtree.NodeToken("States");
      f2 = n0;
      f3 = n1;
      f4 = new NodeToken(".");
   }

   public void accept(foo.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(foo.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(foo.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(foo.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

