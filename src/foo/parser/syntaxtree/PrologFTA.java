//
// Generated by JTB 1.3.2
//

package foo.parser.syntaxtree;

import foo.parser.syntaxtree.Node;
import foo.parser.syntaxtree.NodeOptional;
import foo.parser.syntaxtree.NodeToken;
import foo.parser.syntaxtree.PrologTransitions;

/**
 * Grammar production:
 * f0 -> ( PrologFinalStates() )?
 * f1 -> ( <TRANSITIONS> <FULLSTOP> )?
 * f2 -> PrologTransitions()
 * f3 -> <EOF>
 */
public class PrologFTA implements Node {
   public foo.parser.syntaxtree.NodeOptional f0;
   public foo.parser.syntaxtree.NodeOptional f1;
   public foo.parser.syntaxtree.PrologTransitions f2;
   public foo.parser.syntaxtree.NodeToken f3;

   public PrologFTA(foo.parser.syntaxtree.NodeOptional n0, foo.parser.syntaxtree.NodeOptional n1, foo.parser.syntaxtree.PrologTransitions n2, foo.parser.syntaxtree.NodeToken n3) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
   }

   public PrologFTA(foo.parser.syntaxtree.NodeOptional n0, NodeOptional n1, PrologTransitions n2) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = new NodeToken("");
   }

   public void accept(foo.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(foo.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(foo.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(foo.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

