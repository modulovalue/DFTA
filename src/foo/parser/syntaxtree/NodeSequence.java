//
// Generated by JTB 1.3.2
//

package foo.parser.syntaxtree;

import foo.parser.syntaxtree.Node;
import foo.parser.syntaxtree.NodeListInterface;

import java.util.*;

/**
 * Represents a sequence of nodes nested within a choice, list,
 * optional list, or optional, e.g. ( A B )+ or [ C D E ]
 */
public class NodeSequence implements NodeListInterface {
   public NodeSequence(int n) {
      nodes = new Vector<foo.parser.syntaxtree.Node>(n);
   }

   public NodeSequence(foo.parser.syntaxtree.Node firstNode) {
      nodes = new Vector<foo.parser.syntaxtree.Node>();
      addNode(firstNode);
   }

   public void addNode(foo.parser.syntaxtree.Node n) {
      nodes.addElement(n);
   }

   public foo.parser.syntaxtree.Node elementAt(int i)  { return nodes.elementAt(i); }
   public Enumeration<foo.parser.syntaxtree.Node> elements() { return nodes.elements(); }
   public int size()             { return nodes.size(); }
   public void accept(foo.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(foo.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(foo.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(foo.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }

   public Vector<Node> nodes;
}

